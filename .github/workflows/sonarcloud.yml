import io.github.resilience4j.retry.Retry;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.sql.SQLException;
import java.time.Duration;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class DatabaseRetryManagerTest {
    
    private DatabaseRetryManager retryManager;
    
    @Mock
    private Runnable mockOperation;
    
    @Before
    public void setUp() {
        // Use fast execution for most tests
        retryManager = new DatabaseRetryManager(3, Duration.ofMillis(100));
    }
    
    @Test
    public void testConstructor_WithValidConfiguration_ShouldCreateInstance() {
        // Given & When
        DatabaseRetryManager manager = new DatabaseRetryManager(5, Duration.ofSeconds(60));
        
        // Then
        assertNotNull("RetryManager instance should not be null", manager);
    }
    
    @Test
    public void testExecuteWithRetry_SuccessfulOperation_ShouldExecuteOnce() {
        // Given
        AtomicInteger callCount = new AtomicInteger(0);
        Runnable operation = () -> callCount.incrementAndGet();
        
        // When
        retryManager.executeWithRetry(operation);
        
        // Then
        assertEquals("Should execute operation once", 1, callCount.get());
    }
    
    @Test
    public void testExecuteWithRetry_WithORA00054_ShouldRetryAndSucceed() {
        // Given
        AtomicInteger callCount = new AtomicInteger(0);
        
        Runnable operation = () -> {
            int count = callCount.incrementAndGet();
            if (count < 2) {
                throw new RuntimeException(new SQLException("resource busy", "54000", 54));
            }
            // Success on second attempt
        };
        
        // When
        retryManager.executeWithRetry(operation);
        
        // Then
        assertEquals("Should have been called twice (1 failure + 1 success)", 2, callCount.get());
    }
    
    @Test
    public void testExecuteWithRetry_WithORA00054_ShouldRetryMaxAttempts() {
        // Given
        AtomicInteger callCount = new AtomicInteger(0);
        SQLException ora00054 = new SQLException("resource busy", "54000", 54);
        
        Runnable operation = () -> {
            callCount.incrementAndGet();
            throw new RuntimeException(ora00054);
        };
        
        // When & Then
        try {
            retryManager.executeWithRetry(operation);
            fail("Should have thrown exception after max attempts");
        } catch (Exception e) {
            assertEquals("Should have been called 3 times", 3, callCount.get());
            assertTrue("Should contain original SQLException", 
                e.getCause() instanceof SQLException);
            assertEquals("Should be ORA-00054", 54, 
                ((SQLException) e.getCause()).getErrorCode());
        }
    }
    
    @Test
    public void testExecuteWithRetry_WithNonRetryableException_ShouldNotRetry() {
        // Given
        AtomicInteger callCount = new AtomicInteger(0);
        SQLException nonRetryableException = new SQLException("table not found", "42000", 942);
        
        Runnable operation = () -> {
            callCount.incrementAndGet();
            throw new RuntimeException(nonRetryableException);
        };
        
        // When & Then
        try {
            retryManager.executeWithRetry(operation);
            fail("Should have thrown exception immediately");
        } catch (Exception e) {
            assertEquals("Should have been called only once", 1, callCount.get());
            assertTrue("Should contain original SQLException", 
                e.getCause() instanceof SQLException);
            assertEquals("Should be ORA-00942", 942, 
                ((SQLException) e.getCause()).getErrorCode());
        }
    }
    
    @Test
    public void testExecuteWithRetry_WithRuntimeException_ShouldNotRetry() {
        // Given
        AtomicInteger callCount = new AtomicInteger(0);
        
        Runnable operation = () -> {
            callCount.incrementAndGet();
            throw new RuntimeException("Some runtime error");
        };
        
        // When & Then
        try {
            retryManager.executeWithRetry(operation);
            fail("Should have thrown exception immediately");
        } catch (Exception e) {
            assertEquals("Should have been called only once", 1, callCount.get());
            assertEquals("Should be runtime exception", "Some runtime error", e.getMessage());
        }
    }
    
    @Test
    public void testConstructor_WithDifferentMaxAttempts_ShouldHonorConfiguration() {
        // Given
        DatabaseRetryManager manager = new DatabaseRetryManager(5, Duration.ofMillis(50));
        AtomicInteger callCount = new AtomicInteger(0);
        SQLException ora00054 = new SQLException("resource busy", "54000", 54);
        
        Runnable operation = () -> {
            callCount.incrementAndGet();
            throw new RuntimeException(ora00054);
        };
        
        // When & Then
        try {
            manager.executeWithRetry(operation);
            fail("Should have thrown exception after max attempts");
        } catch (Exception e) {
            assertEquals("Should have been called 5 times", 5, callCount.get());
        }
    }
    
    @Test
    public void testConstructor_WithDifferentWaitDuration_ShouldHonorTiming() {
        // Given
        DatabaseRetryManager manager = new DatabaseRetryManager(2, Duration.ofMillis(200));
        AtomicInteger callCount = new AtomicInteger(0);
        SQLException ora00054 = new SQLException("resource busy", "54000", 54);
        
        Runnable operation = () -> {
            callCount.incrementAndGet();
            throw new RuntimeException(ora00054);
        };
        
        long startTime = System.currentTimeMillis();
        
        // When & Then
        try {
            manager.executeWithRetry(operation);
            fail("Should have thrown exception after max attempts");
        } catch (Exception e) {
            long duration = System.currentTimeMillis() - startTime;
            
            assertEquals("Should have been called 2 times", 2, callCount.get());
            assertTrue("Should have waited at least 200ms (1 wait)", duration >= 200);
        }
    }
    
    @Test
    public void testIsORA00054_WithORA00054_ShouldRetry() {
        // Given
        AtomicInteger callCount = new AtomicInteger(0);
        
        Runnable operation = () -> {
            int count = callCount.incrementAndGet();
            if (count == 1) {
                throw new RuntimeException(new SQLException("resource busy", "54000", 54));
            }
            // Success on second attempt
        };
        
        // When
        retryManager.executeWithRetry(operation);
        
        // Then
        assertEquals("Should have retried once", 2, callCount.get());
    }
    
    @Test
    public void testIsORA00054_WithORA00942_ShouldNotRetry() {
        // Given
        AtomicInteger callCount = new AtomicInteger(0);
        
        Runnable operation = () -> {
            callCount.incrementAndGet();
            throw new RuntimeException(new SQLException("table not found", "42000", 942));
        };
        
        // When & Then
        try {
            retryManager.executeWithRetry(operation);
            fail("Should have thrown exception immediately");
        } catch (Exception e) {
            assertEquals("Should have been called only once", 1, callCount.get());
        }
    }
    
    @Test
    public void testIsORA00054_WithNonSQLException_ShouldNotRetry() {
        // Given
        AtomicInteger callCount = new AtomicInteger(0);
        
        Runnable operation = () -> {
            callCount.incrementAndGet();
            throw new IllegalArgumentException("Not a SQL exception");
        };
        
        // When & Then
        try {
            retryManager.executeWithRetry(operation);
            fail("Should have thrown exception immediately");
        } catch (Exception e) {
            assertEquals("Should have been called only once", 1, callCount.get());
            assertTrue("Should be IllegalArgumentException", 
                e instanceof IllegalArgumentException);
        }
    }
    
    @Test
    public void testConstructor_WithProductionConfiguration_ShouldWork() {
        // Given - production-like configuration
        DatabaseRetryManager manager = new DatabaseRetryManager(5, Duration.ofSeconds(60));
        AtomicInteger callCount = new AtomicInteger(0);
        
        Runnable operation = () -> {
            callCount.incrementAndGet();
            // Simulate success
        };
        
        // When
        manager.executeWithRetry(operation);
        
        // Then
        assertEquals("Should execute successfully", 1, callCount.get());
    }
    
    @Test
    public void testConstructor_WithZeroMaxAttempts_ShouldCreateValidInstance() {
        // Given & When
        DatabaseRetryManager manager = new DatabaseRetryManager(0, Duration.ofMillis(100));
        
        // Then
        assertNotNull("Should create instance even with 0 attempts", manager);
    }
    
    @Test
    public void testConstructor_WithLargeWaitDuration_ShouldCreateValidInstance() {
        // Given & When
        DatabaseRetryManager manager = new DatabaseRetryManager(1, Duration.ofHours(1));
        
        // Then
        assertNotNull("Should create instance with large wait duration", manager);
    }
    
    @Test
    public void testExecuteWithRetry_MultipleORA00054Retries_ShouldEventuallySucceed() {
        // Given
        AtomicInteger callCount = new AtomicInteger(0);
        
        Runnable operation = () -> {
            int count = callCount.incrementAndGet();
            if (count <= 2) { // Fail first 2 attempts
                throw new RuntimeException(new SQLException("resource busy", "54000", 54));
            }
            // Success on third attempt
        };
        
        // When
        retryManager.executeWithRetry(operation);
        
        // Then
        assertEquals("Should succeed after 3 attempts", 3, callCount.get());
    }
    
    @Test
    public void testExecuteWithRetry_AlternatingExceptions_ShouldOnlyRetryORA00054() {
        // Given
        AtomicInteger callCount = new AtomicInteger(0);
        
        Runnable operation = () -> {
            int count = callCount.incrementAndGet();
            if (count == 1) {
                // First call: non-retryable exception
                throw new RuntimeException(new SQLException("syntax error", "42000", 900));
            }
        };
        
        // When & Then
        try {
            retryManager.executeWithRetry(operation);
            fail("Should have thrown exception immediately");  
        } catch (Exception e) {
            assertEquals("Should not retry non-ORA-00054 errors", 1, callCount.get());
        }
    }
}
